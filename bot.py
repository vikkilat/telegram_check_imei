import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (InlineKeyboardButton,
                           InlineKeyboardMarkup,
                           CallbackQuery)
from config import API_TOKEN
from imei_checker import check_imei
from database import add_user_to_whitelist, is_user_allowed, create_table


logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN)
dp = Dispatcher()


create_table()


def generate_start_buttons():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI",
                              callback_data="check_imei")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?",
                              callback_data="how_it_works")]
    ])
    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id

    add_user_to_whitelist(user_id)

    keyboard = generate_start_buttons()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback: CallbackQuery):
    data = callback.data

    if data == "check_imei":
        await callback.message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    elif data == "how_it_works":
        await callback.message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç IMEI —á–µ—Ä–µ–∑ API imeicheck.net.\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å IMEI
@dp.message()
async def process_imei(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    if not is_user_allowed(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    imei = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IMEI —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 15 —Ü–∏—Ñ—Ä
    if not imei.isdigit() or len(imei) != 15:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. –í–≤–µ–¥–∏—Ç–µ 15-–∑–Ω–∞—á–Ω—ã–π IMEI.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å IMEI
    result = await check_imei(imei)

    if "error" in result:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI: {result['error']}")
    else:
        info = result.get("data", {})
        response_text = f"üì≤ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI {imei}:*\n\n"
        for key, value in info.items():
            response_text += f"üîπ *{key.capitalize()}*: {value}\n"

        await message.answer(response_text, parse_mode="Markdown")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
